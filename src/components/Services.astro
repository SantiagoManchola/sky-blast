---
// Import service images
import service1 from "../assets/images/services/1.jpg";
import service2 from "../assets/images/services/2.jpg";
import service3 from "../assets/images/services/3.jpg";
import service4 from "../assets/images/services/4.jpg";
import service5 from "../assets/images/services/5.jpg";
import service6 from "../assets/images/services/6.jpg";
import service7 from "../assets/images/services/7.jpg";
import service8 from "../assets/images/services/8.jpg";
import service9 from "../assets/images/services/9.jpg";

// Services data - 9 individual items for Swiper
const services = [
  {
    image: service1,
    title: "High-Rise Facade Cleaning",
  },
  {
    image: service2,
    title: "High-Rise Window Washing",
  },
  {
    image: service3,
    title: "Roof Washing",
  },
  {
    image: service4,
    title: "Solar Panel Cleaning",
  },
  {
    image: service5,
    title: "Gutter Cleaning",
  },
  {
    image: service6,
    title: "Pressure Washing",
  },
  {
    image: service7,
    title: "Exterior Surface Cleaning",
  },
  {
    image: service8,
    title: "Commercial Building Maintenance",
  },
  {
    image: service9,
    title: "Industrial Equipment Cleaning",
  },
];
---

<section id="services" class="py-16 lg:py-24 bg-[#B3DEFB1A]">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Section Title -->
    <div class="text-center mb-16">
      <h2
        class="font-heading text-3xl lg:text-5xl font-bold text-secondary mb-4"
      >
        Our services
      </h2>
      <p class="font-body text-lg text-gray-600 max-w-3xl mx-auto">
        Services we provide for Exterior Cleaning and Maintenance:
      </p>
    </div>

    <!-- Services Swiper -->
    <div class="relative max-w-7xl mx-auto">
      <!-- Swiper -->
      <div class="swiper services-swiper">
        <div class="swiper-wrapper">
          {
            services.map((service, index) => (
              <div class="swiper-slide">
                <div class="bg-white overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 group h-[474px] relative">
                  <!-- Image Container (Full Height) -->
                  <div class="relative h-full overflow-hidden">
                    <img
                      src={service.image.src}
                      alt={service.title}
                      class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500"
                    />
                    
                    <div class="absolute bottom-4 left-4 right-4">
                      <div class="bg-[#FDFDFF] p-4">
                        <h3 class="font-heading text-base text-center text-black">
                          {service.title}
                        </h3>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))
          }
        </div>
        
        <!-- Custom Scrollbar Pagination -->
        <div class="flex justify-center mt-8">
          <div class="services-scrollbar-container relative w-64 h-[5px] bg-blue rounded-full overflow-hidden">
            <div class="services-scrollbar-thumb absolute top-0 left-0 h-full bg-orange rounded-full transition-all duration-300 w-1/3"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  /* Custom scrollbar styling */
  .services-scrollbar-container {
    cursor: pointer;
  }
  
</style>

<script>
  import { Swiper } from "swiper";

  document.addEventListener("DOMContentLoaded", () => {
    let swiperInstance: Swiper | null = null;
    
    const initSwiper = () => {
      const scrollbarThumb = document.querySelector(".services-scrollbar-thumb") as HTMLElement;
      const scrollbarContainer = document.querySelector(".services-scrollbar-container") as HTMLElement;
      
      swiperInstance = new Swiper(".services-swiper", {
        slidesPerView: 1,
        spaceBetween: 24,
        autoHeight: false,
        speed: 600,
        breakpoints: {
          640: {
            slidesPerView: 2,
            spaceBetween: 24,
          },
          1024: {
            slidesPerView: 3,
            spaceBetween: 32,
          },
        },
        on: {
          slideChange: function (swiper) {
            // Update scrollbar position based on current slide
            if (scrollbarThumb) {
              const currentSlide = swiper.activeIndex;
              const slidesPerView = swiper.params.slidesPerView as number || 1;
              const totalSlides = swiper.slides.length;
              
              // Calculate maximum slide index (last possible position)
              const maxSlideIndex = Math.max(0, totalSlides - slidesPerView);
              
              // Calculate thumb width (proportional to visible slides vs total)
              const thumbWidth = (slidesPerView / totalSlides) * 100;
              
              // Calculate thumb position (proportional to current position)
              const thumbPosition = maxSlideIndex > 0 ? (currentSlide / maxSlideIndex) * (100 - thumbWidth) : 0;
              
              scrollbarThumb.style.width = `${thumbWidth}%`;
              scrollbarThumb.style.left = `${thumbPosition}%`;
            }
          },
        },
      });

      // Add click functionality to scrollbar
      if (scrollbarContainer && swiperInstance) {
        scrollbarContainer.addEventListener("click", (e) => {
          if (!swiperInstance) return;
          
          const rect = scrollbarContainer.getBoundingClientRect();
          const clickX = e.clientX - rect.left;
          const containerWidth = rect.width;
          const clickPercentage = clickX / containerWidth;
          
          // Calculate which slide to go to based on click position
          const slidesPerView = swiperInstance.params.slidesPerView as number || 1;
          const totalSlides = swiperInstance.slides.length;
          const maxSlideIndex = Math.max(0, totalSlides - slidesPerView);
          const targetSlide = Math.floor(clickPercentage * (maxSlideIndex + 1));
          
          swiperInstance.slideTo(Math.min(targetSlide, maxSlideIndex));
        });
      }
      
      // Initialize scrollbar position
      if (scrollbarThumb && swiperInstance) {
        const slidesPerView = swiperInstance.params.slidesPerView as number || 1;
        const totalSlides = swiperInstance.slides.length;
        const thumbWidth = (slidesPerView / totalSlides) * 100;
        
        scrollbarThumb.style.width = `${thumbWidth}%`;
        scrollbarThumb.style.left = '0%';
      }
    };

    initSwiper();
  });
</script>
