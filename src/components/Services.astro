---
// Import service images
import service1 from "../assets/images/services/1.jpg";
import service2 from "../assets/images/services/2.jpg";
import service3 from "../assets/images/services/3.jpg";
import service4 from "../assets/images/services/4.jpg";
import service5 from "../assets/images/services/5.jpg";
import service6 from "../assets/images/services/6.jpg";
import service7 from "../assets/images/services/7.jpg";
import service8 from "../assets/images/services/8.jpg";
import service9 from "../assets/images/services/9.jpg";

// Services data - 9 individual items for Swiper
const services = [
  {
    image: service2,
    title: "High-Rise Facade Cleaning",
  },
  {
    image: service1,
    title: "High-Rise Window Washing",
  },
  {
    image: service8,
    title: "Roof Washing",
  },
  {
    image: service7,
    title: "Solar Panel Washing",
  },
  {
    image: service3,
    title: "Tank Cleaning",
  },
  {
    image: service6,
    title: "Warehouse Cleaning",
  },
  {
    image: service9,
    title: "Greenhouse Cleaning",
  },
  {
    image: service5,
    title: "High-Voltage Insulators Cleaning",
  },
  {
    image: service4,
    title: "Exterior Post-Construction Cleaning",
  },
];
---

<section id="services" class="py-16 lg:py-24 bg-[#B3DEFB1A]">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Section Title -->
    <div class="text-center mb-16" data-stagger="300">
      <h2
        class="text-black font-bold text-[40px] leading-[100%] text-center align-middle mb-4 animate-on-scroll"
        data-animation="fade-up"
        data-delay="200"
      >
        Our services
      </h2>
      <p class="text-black font-[400] text-[24px] leading-[100%] text-center animate-on-scroll"
         data-animation="fade-up"
         data-delay="400">
        Services we provide for Exterior Cleaning and Maintenance:
      </p>
    </div>

    <!-- Services Swiper -->
    <div class="relative max-w-7xl mx-auto animate-on-scroll" data-animation="fade-up" data-delay="600">
      <!-- Swiper -->
      <div class="swiper services-swiper">
        <div class="swiper-wrapper">
          {
            services.map((service, index) => (
              <div class="swiper-slide">
                <div class="bg-white overflow-hidden shadow-lg hover:shadow-xl transition-all duration-500 group h-[474px] relative hover-lift service-card">
                  <div class="relative h-full overflow-hidden">
                    <img
                      src={service.image.src}
                      alt={service.title}
                      class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-700 ease-out"
                    />

                    <!-- Overlay con gradiente mejorado -->
                    <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>

                    <div class="absolute bottom-4 left-4 right-4 transform translate-y-2 group-hover:translate-y-0 transition-transform duration-500">
                      <div class="bg-[#FDFDFF] p-4 shadow-lg group-hover:shadow-xl transition-shadow duration-300">
                        <h3 class="font-poppins font-normal text-[24px] leading-[100%] text-black text-center align-middle group-hover:text-orange transition-colors duration-300">
                          {service.title}
                        </h3>
                      </div>
                    </div>

                    <!-- Efecto de brillo en hover -->
                    <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-1000 ease-out"></div>
                  </div>
                </div>
              </div>
            ))
          }
        </div>

        <!-- Custom Scrollbar Pagination con animación -->
        <div class="flex justify-center mt-8 animate-on-scroll" data-animation="fade-up" data-delay="800">
          <div
            class="services-scrollbar-container relative w-64 h-[5px] bg-blue rounded-full overflow-hidden hover-glow"
          >
            <div
              class="services-scrollbar-thumb absolute top-0 left-0 h-full bg-orange rounded-full transition-all duration-300 w-1/3"
            >
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  /* Custom scrollbar styling */
  .services-scrollbar-container {
    cursor: pointer;
    position: relative;
  }

  .services-scrollbar-container::before {
    content: '';
    position: absolute;
    top: -5px;
    left: -5px;
    right: -5px;
    bottom: -5px;
    background: linear-gradient(45deg, #f07845, #b3defb);
    border-radius: 10px;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: -1;
  }

  .services-scrollbar-container:hover::before {
    opacity: 0.3;
  }

  /* Animaciones para las tarjetas de servicio - SIN parpadeo */
  .service-card {
    /* Removemos las animaciones automáticas que causan parpadeo */
    transform: translateY(0);
    opacity: 1;
    transition: all 0.3s ease;
  }

  /* Efecto de hover mejorado */
  .service-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(240, 120, 69, 0.1), rgba(179, 222, 251, 0.1));
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 1;
  }

  .service-card:hover::before {
    opacity: 1;
  }

  /* Animación del scrollbar thumb */
  .services-scrollbar-thumb {
    background: linear-gradient(90deg, #f07845, #e66936);
    box-shadow: 0 2px 4px rgba(240, 120, 69, 0.3);
  }

  .services-scrollbar-thumb::after {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: linear-gradient(90deg, #f07845, #e66936);
    border-radius: inherit;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: -1;
  }

  .services-scrollbar-container:hover .services-scrollbar-thumb::after {
    opacity: 0.5;
  }

  /* Animación de pulso para elementos interactivos */
  .services-scrollbar-container:hover .services-scrollbar-thumb {
    animation: pulse 1.5s infinite;
  }

  @keyframes pulse {
    0%, 100% {
      box-shadow: 0 2px 4px rgba(240, 120, 69, 0.3);
    }
    50% {
      box-shadow: 0 4px 8px rgba(240, 120, 69, 0.5);
    }
  }

  /* Mejoras responsive */
  @media (max-width: 768px) {
    .service-card {
      animation-delay: 0s !important;
    }
  }

  /* Optimización para dispositivos con movimiento reducido */
  @media (prefers-reduced-motion: reduce) {
    .service-card {
      animation: none;
      transform: none;
      opacity: 1;
    }
    
    .services-scrollbar-container:hover .services-scrollbar-thumb {
      animation: none;
    }
  }
</style>

<script>
  import { Swiper } from "swiper";

  document.addEventListener("DOMContentLoaded", () => {
    let swiperInstance: Swiper | null = null;

    const scrollbarThumb = document.querySelector(
      ".services-scrollbar-thumb"
    ) as HTMLElement;
    const scrollbarContainer = document.querySelector(
      ".services-scrollbar-container"
    ) as HTMLElement;

    swiperInstance = new Swiper(".services-swiper", {
      slidesPerView: 1,
      spaceBetween: 24,
      autoHeight: false,
      speed: 500, // Velocidad más suave
      effect: 'slide',
      breakpoints: {
        640: {
          slidesPerView: 2,
          spaceBetween: 24,
        },
        1024: {
          slidesPerView: 3,
          spaceBetween: 32,
        },
      },
      on: {
        slideChange: function (swiper) {
          // Update scrollbar position based on current slide
          if (scrollbarThumb) {
            const currentSlide = swiper.activeIndex;
            const slidesPerView =
              (swiper.params.slidesPerView as number) || 1;
            const totalSlides = swiper.slides.length;

            // Calculate maximum slide index (last possible position)
            const maxSlideIndex = Math.max(0, totalSlides - slidesPerView);

            // Calculate thumb width (proportional to visible slides vs total)
            const thumbWidth = (slidesPerView / totalSlides) * 100;

            // Calculate thumb position (proportional to current position)
            const thumbPosition =
              maxSlideIndex > 0
                ? (currentSlide / maxSlideIndex) * (100 - thumbWidth)
                : 0;

            scrollbarThumb.style.width = `${thumbWidth}%`;
            scrollbarThumb.style.left = `${thumbPosition}%`;
          }
          // Removemos las animaciones que causan parpadeo al cambiar slides
        },
      },
    });

    // Add click functionality to scrollbar
    if (scrollbarContainer && swiperInstance) {
      scrollbarContainer.addEventListener("click", (e) => {
        if (!swiperInstance) return;

        const rect = scrollbarContainer.getBoundingClientRect();
        const clickX = e.clientX - rect.left;
        const containerWidth = rect.width;
        const clickPercentage = clickX / containerWidth;

        // Calculate which slide to go to based on click position
        const slidesPerView =
          (swiperInstance.params.slidesPerView as number) || 1;
        const totalSlides = swiperInstance.slides.length;
        const maxSlideIndex = Math.max(0, totalSlides - slidesPerView);
        const targetSlide = Math.floor(clickPercentage * (maxSlideIndex + 1));

        swiperInstance.slideTo(Math.min(targetSlide, maxSlideIndex));
      });

      // Agregar efecto de hover animado
      scrollbarContainer.addEventListener('mouseenter', () => {
        scrollbarThumb.style.transform = 'scaleY(1.2)';
      });

      scrollbarContainer.addEventListener('mouseleave', () => {
        scrollbarThumb.style.transform = 'scaleY(1)';
      });
    }

    // Initialize scrollbar position
    if (scrollbarThumb && swiperInstance) {
      const slidesPerView =
        (swiperInstance.params.slidesPerView as number) || 1;
      const totalSlides = swiperInstance.slides.length;
      const thumbWidth = (slidesPerView / totalSlides) * 100;

      scrollbarThumb.style.width = `${thumbWidth}%`;
      scrollbarThumb.style.left = "0%";
      scrollbarThumb.style.transition = 'all 0.3s ease';
    }
  });
</script>
